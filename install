#!/usr/bin/env ruby

require_relative 'lib/optimist'
require 'fileutils'
require 'json'
require 'erb'

WORKING_DIR = Dir.pwd
DEVCONTAINER_CONFIG_DIR = "#{__dir__}/config/devcontainer"
DOCKER_CONFIG_DIR = "#{__dir__}/config/docker"

TYPES = Dir["#{DEVCONTAINER_CONFIG_DIR}/*"].map do |config_file|
  type = File.basename(config_file, ".json")
  next if type == "base"
  type
end.compact

OPTS = Optimist::options do 
  banner "Creates a VS Code devcontainer configuration in the current directory"
  opt :name, "Devcontainer name", :type => :string
  opt :type, "Kind of devcontainer environment, one of [#{TYPES.join(', ')}]", :type => :string
  opt :color, "Editor color to differentiate the app (optional, hex format without the pound sign)", :type => :string, :default => nil
  opt :docker_base, "Docker base image", :type => :string  
end

Optimist::die :type, "must be one of [#{TYPES.join(', ')}]" if !TYPES.include?(OPTS[:type])
Optimist::die :docker_base, "must be specified" if OPTS[:docker_base].nil?
Optimist::die :color, "must be a hex color without the '#', e.g. 'fff' or 'ffffff'" unless (OPTS[:color].nil? || OPTS[:color].match?(/\A(\h{6}|\h{3})\z/))

def gitignore
  # https://stackoverflow.com/questions/7335420/global-git-ignore#comment66973282_7335420
  # https://git-scm.com/docs/gitignore
  gitignore_file = "#{WORKING_DIR}/.git/info/exclude"
  return unless File.exist?(gitignore_file)
  
  return if File.read(gitignore_file).match?(/\.devcontainer(\n|\z)/)
  File.open(gitignore_file, "a") { |f| f.write(".devcontainer") }
end

def make_devcontainer_dir
  FileUtils.mkdir_p("#{WORKING_DIR}/.devcontainer")
end

def read_devcontainer_config(filename)
  full_filename = "#{DEVCONTAINER_CONFIG_DIR}/#{filename}"
  File.exist?(full_filename) ?
    JSON.parse(File.read(full_filename)) : 
    {}
end

def make_devcontainer_json
  make_devcontainer_dir
  hash = read_devcontainer_config("base.json")

  hash["name"] = OPTS[:name] unless OPTS[:name].nil?

  if OPTS[:color]
    hash["settings"]["workbench.colorCustomizations"] = {
      "titleBar.activeBackground": "##{OPTS[:color]}",
      "editorGroupHeader.tabsBorder": "##{OPTS[:color]}",
    }
  end

  type_specific_hash = read_devcontainer_config("#{OPTS[:type]}.json")

  hash["extensions"] = (hash["extensions"] + type_specific_hash["extra_extensions"]).uniq
  hash["settings"].merge!(type_specific_hash["settings"])

  File.open("#{WORKING_DIR}/.devcontainer/devcontainer.json", "w") { |f| f.write(JSON.pretty_generate(hash))}
end

def make_dockerfile
  binding_clone = binding.clone

  # read snippets
  Dir["#{DOCKER_CONFIG_DIR}/snippets/*"].each do |snippet_file|
    binding_clone.local_variable_set(File.basename(snippet_file), File.read(snippet_file))
  end

  dockerfile = ERB.new(File.read("#{DOCKER_CONFIG_DIR}/Dockerfile.#{OPTS[:type]}.erb"), trim_mode: '-').result(binding_clone)

  File.open("#{WORKING_DIR}/.devcontainer/Dockerfile", "w") { |f| f.write(dockerfile)}
end

gitignore
make_devcontainer_json
make_dockerfile
